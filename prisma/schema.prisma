// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PlayerProfile {
  id                   Int                     @id
  uuid                 String                  @unique
  userAccountUuid      String                  @map("user_account_uuid")
  name                 String                  @unique
  description          String?
  imageUrl             String?                 @map("image_url")
  level                Int
  exp                  Int
  currentMana          Int                     @map("current_mana")
  maxMana              Int                     @map("max_mana")
  zeny                 Int
  crystalShard         Int                     @map("crystal_shard")
  goldenPoringCoin     Int                     @map("golden_poring_coin")
  poringCoin           Int                     @map("poring_coin")
  gachaponTicket       Int                     @map("gachapon_ticket")
  createdAt            DateTime                @map("created_at")
  createdBy            String                  @map("created_by")
  updatedAt            DateTime                @map("updated_at")
  updatedBy            String                  @map("updated_by")
  deletedAt            DateTime?               @map("deleted_at")
  deletedBy            String?                 @map("deleted_by")
  version              Int
  characterCustomizations CharacterCustomization[]

  @@map("player_profiles")
}

model CustomeBase {
  id                   Int                     @id
  uuid                 String                  @unique
  equipmentId          String                  @unique @map("equipment_id")
  name                 String
  info                 String?
  imageUrl             String?                 @map("image_url")
  prefabUrl            String?                 @map("prefab_url")
  model                Int
  isDefault            Int                     @map("is_default")
  isColorable          Int                     @map("is_colorable")
  currentColor         String?                 @map("current_color")
  colors               String?
  equipType            Int                     @map("equip_type")
  tier                 Int
  createdAt            DateTime                @map("created_at")
  createdBy            String                  @map("created_by")
  updatedAt            DateTime                @map("updated_at")
  updatedBy            String                  @map("updated_by")
  deletedAt            DateTime?               @map("deleted_at")
  deletedBy            String?                 @map("deleted_by")
  version              Int
  characterCustomizations CharacterCustomization[]

  @@map("custome_bases")
}

model CharacterCustomization {
  id                   Int                     @id
  uuid                 String                  @unique
  playerUuid           String                  @map("player_uuid")
  customeBaseUuid      String                  @map("custome_base_uuid")
  obtainUuid           String                  @map("obtain_uuid")
  obtainDate           DateTime                @map("obtain_date")
  isFashion            Int                     @map("is_fashion")
  isActive             Int                     @map("is_active")
  isEquiped            Int                     @map("is_equiped")
  createdAt            DateTime                @map("created_at")
  createdBy            String                  @map("created_by")
  updatedAt            DateTime                @map("updated_at")
  updatedBy            String                  @map("updated_by")
  deletedAt            DateTime?               @map("deleted_at")
  deletedBy            String?                 @map("deleted_by")
  version              Int
  player               PlayerProfile           @relation(fields: [playerUuid], references: [uuid])
  customeBase          CustomeBase             @relation(fields: [customeBaseUuid], references: [uuid])
  obtainBase           ObtainBase              @relation(fields: [obtainUuid], references: [uuid])

  @@map("character_customizations")
}

model ObtainBase {
  id                   Int                     @id
  uuid                 String                  @unique
  obtainType           String                  @map("obtain_type")
  typeUuid             String                  @map("type_uuid")
  createdAt            DateTime                @map("created_at")
  createdBy            String                  @map("created_by")
  updatedAt            DateTime                @map("updated_at")
  updatedBy            String                  @map("updated_by")
  deletedAt            DateTime?               @map("deleted_at")
  deletedBy            String?                 @map("deleted_by")
  version              Int
  characterCustomizations CharacterCustomization[]

  @@map("obtain_bases")
}